generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String             @id @default(cuid())
  clerkId                 String             @unique
  email                   String             @unique
  firstName               String?
  lastName                String?
  username                String?            @unique
  profileImageUrl         String?
  clerkCustomerId         String?
  hasCommercialLicense    Boolean            @default(false)
  hasApiAccess            Boolean            @default(false)
  hasCustomBranding       Boolean            @default(false)
  maxQuality              String             @default("standard")
  lifetimeValue           Float              @default(0.0)
  firstPaidDate           DateTime?
  lastPaymentDate         DateTime?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  imageCompositions       ImageComposition[]
  photoshoots             Photoshoot[]

  @@map("users")
}

model Photoshoot {
  id                 String       @id @default(cuid())
  userId             String
  originalImageUrl   String
  generatedImageUrl  String
  thumbnailUrl       String?
  bwImageUrl         String?
  imageKitFileId     String?
  style              String       @default("professional")
  originalPrompt     String
  enhancedPrompt     String?
  status             String       @default("pending")
  parentPhotoshootId String?
  metadata           Json?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  parentPhotoshoot   Photoshoot?  @relation("PhotoshootRefinements", fields: [parentPhotoshootId], references: [id])
  refinements        Photoshoot[] @relation("PhotoshootRefinements")
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([status])
  @@index([parentPhotoshootId])
  @@map("photoshoots")
}


model ImageComposition {
  id              String   @id @default(cuid())
  userId          String
  outputImageUrl  String
  sourceImageUrls Json
  compositionType String
  status          String   @default("processing")
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([status])
  @@map("image_compositions")
}
